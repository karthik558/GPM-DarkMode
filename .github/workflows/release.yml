name: 🚀 Create and Upload GPM-DarkMode Release

on:
  # Removing automatic trigger on push
  # Only using workflow_dispatch for manual triggering
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch: 0.0.X, minor: 0.X.0, major: X.0.0)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (leave blank to use release_type)'
        required: false
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  build_and_release:
    name: 📦 Build and Release Extension
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: 📅 Set up date and time
        id: date
        run: |
          echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: 📝 Get version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📊 Current version: $VERSION"

      - name: 📋 Generate comprehensive changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "## 🚀 GPM-DarkMode v${{ env.VERSION }} (${{ env.RELEASE_DATE }})" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### 🔄 Latest Changes" >> $GITHUB_ENV
          git log -n 6 --pretty=format:"- %s (%h)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### 🙏 Thank you for using GPM-DarkMode!" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 📦 Compress files
        id: compress_files
        run: |
          ZIP_NAME="GPM-DarkMode-${{ env.VERSION }}.zip"
          if [ -z "${{ env.VERSION }}" ]; then
            ZIP_NAME="GPM-DarkMode.zip"
          fi
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          
          # Exclude development files to reduce size
          zip -r "$ZIP_NAME" . -x ".git/*" -x ".github/*" -x "src/*" -x "*.md" -x ".gitignore" -x "*.log" -x "manifest.chrome.json" -x "manifest.firefox.json" -x "logo.png" -x "build.sh"
          
          echo "📊 Generated package: $ZIP_NAME ($(du -h "$ZIP_NAME" | cut -f1))"

      - name: 🔍 Validate ZIP file
        run: |
          echo "📊 Verifying package contents..."
          unzip -l "${{ env.ZIP_NAME }}" | tail -n +4 | head -n -2 | awk '{print $4}' | sort
          
          # Verify manifest.json is present
          if unzip -l "${{ env.ZIP_NAME }}" | grep -q manifest.json; then
            echo "✅ manifest.json found in package"
          else
            echo "❌ manifest.json not found in package"
            exit 1
          fi

      - name: 📢 Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GPM_DARK_MODE }}
        with:
          tag_name: v${{ env.VERSION }}-${{ env.RELEASE_TAG }}
          release_name: GPM-DarkMode v${{ env.VERSION }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      - name: 📤 Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GPM_DARK_MODE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip

      - name: 🎉 Release Completion
        run: |
          echo "::notice title=✅ Release Created Successfully::GPM-DarkMode v${{ env.VERSION }} has been released!"
          echo "📊 Download link: https://github.com/${{ github.repository }}/releases/latest/download/${{ env.ZIP_NAME }}"